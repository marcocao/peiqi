<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.cyy</groupId>
  <artifactId>peiqi</artifactId>
  <packaging>war</packaging>
  <version>0.1-SNAPSHOT</version>
  <name>peiqi Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <build>
    <finalName>peiqi</finalName>
  </build>
  <properties>
     <spring.version>4.3.2.RELEASE</spring.version>
     <slf.version>1.7.7</slf.version>
 	 <logback-classic>1.1.2</logback-classic>
 	 <hibernate.version>5.2.6.Final</hibernate.version>
	<dbcp2.version>2.1.1</dbcp2.version>
	<postgresql.version>9.4.1212</postgresql.version>
	<mysql.version>6.0.3</mysql.version>
	<h2database.version>1.4.192</h2database.version>	 
 </properties>
 <dependencyManagement>
     <dependencies>
     	<!-- 使用Spring的不同模块时，可能由于使用不同版本的Spring模块引入同一第三方库的不同版本。Maven 
     	通过 “BOM” 来解决这个问题：在dependencyManagement中引入spring-framework-bom来确保所有的spring模块
     	都使用统一的版本： 此时，所有使用的spring模块dependency都不需要在声明version属性http://blog.csdn.net/robinjwong/article/details/40268197-->
         <dependency>
             <groupId>org.springframework</groupId>
             <artifactId>spring-framework-bom</artifactId>
             <version>${spring.version}</version>
             <type>pom</type>
             <scope>import</scope>
         </dependency>
     </dependencies>
 </dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <!-- spring -->
     <dependency>
         <groupId>org.springframework</groupId>
         <artifactId>spring-core</artifactId>
         <exclusions>
             <exclusion>
                 <groupId>commons-logging</groupId>
                 <artifactId>commons-logging</artifactId>
             </exclusion>
         </exclusions>
     </dependency>
     <dependency>
         <groupId>org.springframework</groupId>
         <artifactId>spring-beans</artifactId>
     </dependency>
     <dependency>
         <groupId>org.springframework</groupId>
         <artifactId>spring-context</artifactId>
     </dependency>
     <dependency>
         <groupId>org.springframework</groupId>
         <artifactId>spring-web</artifactId>
     </dependency>
     <dependency>
         <groupId>org.springframework</groupId>
         <artifactId>spring-webmvc</artifactId>
     </dependency>
     <dependency>
         <groupId>org.springframework</groupId>
         <artifactId>spring-test</artifactId>
     </dependency>
     <!-- spring -->
	 <!-- hibernate -->
	  <dependency>
	      <groupId>org.springframework</groupId>
	      <artifactId>spring-orm</artifactId>
	  </dependency>
	  <dependency>
	      <groupId>org.springframework</groupId>
	      <artifactId>spring-tx</artifactId>
	  </dependency>
	  <dependency>
	      <groupId>org.hibernate</groupId>
	      <artifactId>hibernate-core</artifactId>
	      <version>${hibernate.version}</version>
	      <exclusions>
	      	<exclusion>
	      		<groupId>javax.el</groupId>
	      		<artifactId>el-api</artifactId>
	      	</exclusion>
	      </exclusions>
	  </dependency>
	  <dependency>
	      <groupId>org.hibernate</groupId>
	      <artifactId>hibernate-validator</artifactId>
	      <version>5.3.4.Final</version>
	  </dependency>
	  <dependency>
	      <groupId>org.apache.commons</groupId>
	      <artifactId>commons-dbcp2</artifactId>
	      <version>${dbcp2.version}</version>
	  </dependency>
	  <!-- hibernate -->
	  <!-- postgresql -->
	  <dependency>
	      <groupId>org.postgresql</groupId>
	      <artifactId>postgresql</artifactId>
	      <version>${postgresql.version}</version>
	  </dependency>
	  <!-- postgresql -->
	  <!-- mysql -->
	  <dependency>
	      <groupId>mysql</groupId>
	      <artifactId>mysql-connector-java</artifactId>
	      <version>${mysql.version}</version>
	  </dependency>
	  <!-- mysql -->
	  <!-- h2database -->
	  <dependency>
	      <groupId>com.h2database</groupId>
	      <artifactId>h2</artifactId>
	      <version>${h2database.version}</version>
	  </dependency>
	 <!-- h2database -->
     <!-- logging Spring Framework 一直以来都是依赖 commons-logging，通过在 Maven pom.xml 进行配置，
	     可以让 Spring Framework 依赖于越来越流行的 SLF4J，这是利用了 slf4j.org 提供的 jcl-over-slf4j 
	     把 commons-logging API 转接到 SLF4J API 上实现的，这不就是移花接木吗？https://my.oschina.net/qczhang/blog/188768-->
	 <dependency>
	     <groupId>org.slf4j</groupId>
	     <artifactId>jcl-over-slf4j</artifactId>
	     <version>${slf.version}</version>
	 </dependency>
	 <dependency>
	     <groupId>ch.qos.logback</groupId>
	     <artifactId>logback-classic</artifactId>
	     <version>${logback-classic}</version>
	 </dependency>
	 <!-- logging -->
  </dependencies>
</project>
